# FROM node:20.17.0-bookworm-slim as nodebin


FROM python:3.12.4-slim AS base

# COPY --from=nodebin /usr/local/bin /usr/local/bin
# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/

# ARG UID=10001
# RUN adduser \
#     --disabled-password \
#     --gecos "" \
#     --home "/nonexistent" \
#     --shell "/sbin/nologin" \
#     --no-create-home \
#     --uid "${UID}" \
#     appuser \
#     && chown -R appuser /app
# chown -R ... was not generated by docker init ..... it was added later

# RUN adduser -u 5678 --disabled-password --gecos "" appuser && chown -R appuser /app

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.


RUN apt-get update \
    && apt-get install -y \
    binutils \
    libproj-dev \
    gdal-bin \
    curl \
    xz-utils

# ENV NODE_VERSION=20
# RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
# ENV NVM_DIR=/root/.nvm
# RUN . "$NVM_DIR/nvm.sh" && nvm install ${NODE_VERSION}
# RUN . "$NVM_DIR/nvm.sh" &&  nvm use v${NODE_VERSION}
# RUN . "$NVM_DIR/nvm.sh" && nvm alias default v${NODE_VERSION}
# RUN cp /root/.nvm/versions/node/v${NODE_VERSION}/bin/node /usr/bin/
# RUN cp /root/.nvm/versions/node/v${NODE_VERSION}/bin/npm /usr/bin/

ENV NODE_VERSION 20.17.0
ENV ARCH=x64
# RUN curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz" \
#   && tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner \
#   && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" \
#   && ln -s /usr/local/bin/node /usr/local/bin/nodejs \
#   # smoke tests
#   && node --version \
#   && npm --version

# RUN apt-get install -y xz-utils
RUN curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz" \
  && tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner \
  && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" \
  && ln -s /usr/local/bin/node /usr/local/bin/nodejs \
  # smoke tests
  && node --version \
  && npm --version

# Set the NVM_DIR environment variable to the desired directory
# RUN pwd
# RUN pwd
# RUN mkdir -p /home/appuser/.nvm
# ENV NVM_DIR=/home/appuser/.nvm

# # Download and install NVM into the specified directory
# RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash

# ENV NVM_DIR=/home/appuser/.nvm
# RUN . [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
# RUN . [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"



# Add NVM to the PATH for all users
# ENV PATH=$NVM_DIR/versions/node/v0.40.0/bin:$PATH

# Source NVM scripts so that it's available in the current environment
# RUN bash -c "source $NVM_DIR/nvm.sh"
# RUN nvm install 20

# RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
# RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
# RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
# ENV NVM_DIR=$HOME
# RUN [ -s "$NVM_DIR/.nvm/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
# RUN [ -s "$NVM_DIR/.nvm/bash_completion" ] && \. "$NVM_DIR/bash_completion"
# RUN nvm install 20

    
# ENV NVM_DIR=/root/.nvm
# RUN [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
# RUN [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
# RUN nvm install 20

# ENV NVM_DIR=/root/.nvm
# RUN . "$NVM_DIR/nvm.sh" && nvm install 20
# ARG NODE_VERSION=20
# ENV NVM_DIR=/root/.nvm
# RUN . "$NVM_DIR/nvm.sh" && nvm install ${NODE_VERSION}
# RUN . "$NVM_DIR/nvm.sh" &&  nvm use v${NODE_VERSION}
# RUN . "$NVM_DIR/nvm.sh" && nvm alias default v${NODE_VERSION}
# /home/kartik/.nvm/versions/node/v20.17.0/bin/node

# here node version is hardcoded
# RUN cp /root/.nvm/versions/node/v20.17.0/bin/node /usr/local/bin/
# RUN cp /root/.nvm/versions/node/v10.8.2/bin/npm /usr/local/bin/

# RUN /root/.nvm/versions/node/v${NODE_VERSION}/bin/npm install  leasot@latest -g


RUN python -m pip install pipenv
RUN --mount=type=cache,target=/root/.cache/pipenv \
    --mount=type=bind,source=Pipfile,target=Pipfile \
    --mount=type=bind,source=Pipfile.lock,target=Pipfile.lock \
    python -m pipenv install --system

# RUN python -m pip install pipenv
# COPY Pipfile .
# # RUN python -m pipenv lock

# COPY Pipfile.lock .
# # RUN python -m pipenv install --deploy \
# #     pipenv --clear

# RUN pipenv install --deploy \
#     pipenv --clear


# Switch to the non-privileged user to run the application.
# USER appuser

# Copy the source code into the container.
COPY . .
# COPY ../../.nvm/versions/node/v20.17.0/bin/node /usr/local/bin
# COPY ../../.nvm/versions/node/v20.17.0/bin/npm /usr/local/bin

RUN python manage.py tailwind install

RUN adduser -u 5678 --disabled-password --gecos "" appuser && chown -R appuser /app
USER appuser


# Expose the port that the application listens on.
EXPOSE 8000

# Run the application.
# CMD gunicorn 'likemeapp.wsgi' --bind=0.0.0.0:8000

